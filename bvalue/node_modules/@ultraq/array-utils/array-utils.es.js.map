{"version":3,"sources":["array-utils.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA,OAAO,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AAE9B,SAAO,KAAK,CAAC,MAAN,CAAa,UAAC,WAAD,EAAc,KAAd,EAAwB;AAC3C,WAAO,WAAW,CAAC,MAAZ,CAAmB,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,OAAO,CAAC,KAAD,CAA9B,GAAwC,KAA3D,CAAP;AACA,GAFM,EAEJ,EAFI,CAAP;AAGA;AAED;;;;;;;;;;;;;AAYA,OAAO,SAAS,KAAT,CAAe,KAAf,EAAsB,GAAtB,EAAqC;AAAA,MAAV,IAAU,uEAAH,CAAG;AAE3C,SAAO,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,KAAK,CAAC,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,GAAG,KAAP,IAAgB,IAA1B,CAAD,CAApB,EAAuD,GAAvD,CAA2D,UAAC,KAAD,EAAQ,KAAR;AAAA,WAAkB,KAAK,GAAG,IAAR,GAAe,KAAjC;AAAA,GAA3D,CAAP;AACA;AAED;;;;;;;;;;AASA,OAAO,SAAS,MAAT,CAAgB,KAAhB,EAAuB,SAAvB,EAAkC;AAExC,SAAO,KAAK,CAAC,IAAN,CAAW,UAAC,IAAD,EAAO,KAAP,EAAiB;AAClC,QAAI,SAAS,CAAC,IAAD,CAAb,EAAqB;AACpB,MAAA,KAAK,CAAC,MAAN,CAAa,KAAb,EAAoB,CAApB;AACA,aAAO,IAAP;AACA;AACD,GALM,CAAP;AAMA","file":"array-utils.es.js","sourcesContent":["/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Flattens an array of arrays of infinite depth into a single-dimension array.\n * \n * > This is now natively in JavaScript as the `flat` method on an Array\n * > instance.  [Check MDN for which browsers have access to this feature](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat).\n * > If you can't use `flat`, then this method will do the job ğŸ™‚\n * \n * @param {Array} array\n * @return {Array} Flattened array.\n */\nexport function flatten(array) {\n\n\treturn array.reduce((accumulator, value) => {\n\t\treturn accumulator.concat(Array.isArray(value) ? flatten(value) : value);\n\t}, []);\n}\n\n/**\n * Creates an array of numbers from the starting value (inclusive) to the end\n * (exclusive), with an optional step (the gap between values).\n * \n * @param {Number} start\n *   The value to start at, the first item in the returned array.\n * @param {Number} end\n *   The value to end with, the last item in the returned array.\n * @param {Number} [step=1]\n *   The increment/gap between values, defaults to 1.\n * @return {Array} An array encompassing the given range.\n */\nexport function range(start, end, step = 1) {\n\n\treturn Array.apply(0, Array(Math.ceil((end - start) / step))).map((empty, index) => index * step + start);\n}\n\n/**\n * Remove and return the first item from `array` that matches the predicate\n * function.\n * \n * @param {Array} array\n * @param {Function} predicate\n *   Invoked with the array item.\n * @return {Object} The matching item, or `null` if no match was found.\n */\nexport function remove(array, predicate) {\n\n\treturn array.find((item, index) => {\n\t\tif (predicate(item)) {\n\t\t\tarray.splice(index, 1);\n\t\t\treturn item;\n\t\t}\n\t});\n}\n"]}